#!/usr/bin/env python

# from arm import Arm

# constants
# adjust as appropriate
X_ACCELERATION_SENSITIVITY = 1
Y_ACCELERATION_SENSITIVITY = 1
Z_ACCELERATION_SENSITIVITY = 1


# pass the handler an instance of the robot arm controller to work with
# the robotArm's initialization can be done beforehand
class OmegaArmHandler(SimpleHTTPRequestHandler, robotArm):

    def __init__(self, request, client_address, server):
        SimpleHTTPRequestHandler.__init__(self, request, client_address, server)

    # move function
    def move(self, x, y, z):
        print x, y, z
        x = int(x)
        y = int(y)
        z = int(z)

        # change the below into accelerometer readings
        # take accelerometer readings and 

        
        
        s0 = max(min(x - 20, 140), 0)
        s1 = 180 - max(min(130 if y < 130 else y, 160), 130) + 15
        s2 = max(min(y, 135), 45)
        s3 = max(min(y, 140), 80)
        s4 = 180 - max(min(z, 180), 0)

        SERVO.set_angle(0, s0)
        SERVO.set_angle(1, s1)
        SERVO.set_angle(2, s2)
        SERVO.set_angle(3, s3)
        SERVO.set_angle(4, s4)

    def pinch(self):
        SERVO.set_angle(5, 30)

    def release(self):
        SERVO.set_angle(5, 100)

    def end_headers (self):
        self.send_header('Access-Control-Allow-Origin', '*')
        SimpleHTTPRequestHandler.end_headers(self)

    def do_POST(self):
        length = int(self.headers['Content-Length'])
        post_data = parse_qs(self.rfile.read(length).decode('utf-8'))
        post_items = {}
        for key, value in post_data.iteritems():
            post_items[key] = int(value[0])
        
        displacement_command = []
        displacement_command.append(x * X_ACCELERATION_SENSITIVITY)
        displacement_command.append(y * Y_ACCELERATION_SENSITIVITY)
        displacement_command.append(z * Z_ACCELERATION_SENSITIVITY)
        self.move(post_items['x'], post_items['y'], post_items['z'])

    def do_GET(self):
        if self.path == '/':
            f = open('/root/arm/index.html')
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(f.read())
            f.close()
            return

        elif self.path.endswith('.js'):
            f = open('/root/arm' + self.path)
            self.send_response(200)
            self.send_header('Content-type', 'application/javascript')
            self.end_headers()
            self.wfile.write(f.read())
            f.close()
            return

        elif self.path[0:6] == '/pinch':
            self.pinch()

        elif self.path[0:8] == '/release':
            self.release()

        self.send_response(200)
        self.end_headers()

    def log_message(self, format, *args):
        return



